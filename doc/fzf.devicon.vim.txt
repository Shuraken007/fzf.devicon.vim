fzf-devicon-vim.txt	fzf-devicon-vim	Last change: July 29 2023
FZF-VIM-DEVICON - TABLE OF CONTENTS        *fzf-devicon-vim* *fzf-devicon-vim-toc*
==============================================================================

  fzf :purple_heart: devicon :heart: vim    |fzf-devicon-vim-fzfheart-vim|
    Installation                            |fzf-devicon-vim-installation|
      Using vim-plug                        |fzf-devicon-vim-using-vim-plug|
      Dependencies                          |fzf-devicon-vim-dependencies|
    Commands                                |fzf-devicon-vim-commands|
    Customization                           |fzf-devicon-vim-customization|
      Global options                        |fzf-devicon-vim-global-options|
        Preview window                      |fzf-devicon-vim-preview-window|
    License                                 |fzf-devicon-vim-license|

FZF ::PURPLE_HEART: devicon ::HEART: VIM                           *fzf-devicon-vim-fzfheart-vim*
==============================================================================

Things you can do with {fzf}{1}, devicons and Vim.

                                           {1} https://github.com/junegunn/fzf


INSTALLATION                                      *fzf-devicon-vim-installation*
==============================================================================

fzf.devicon.vim depends on the basic Vim plugin of {the main fzf repository}{1},
which means you need to set up both "fzf" and "fzf.devicon.vim" on Vim. To learn
more about fzf/Vim integration, see {README-VIM}{4}.

                 {1} https://github.com/junegunn/fzf
                 {4} https://github.com/junegunn/fzf/blob/master/README-VIM.md


< Using vim-plug >____________________________________________________________~
                                                *fzf-devicon-vim-using-vim-plug*
>
    Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
    Plug 'coreyja/fzf.devicon.vim'
<
`fzf#install()` makes sure that you have the latest binary, but it's optional,
so you can omit it if you use a plugin manager that doesn't support hooks.


< Dependencies >______________________________________________________________~
                                                  *fzf-devicon-vim-dependencies*

 - {fzf}{1} 0.41.1 or above
 - For syntax-highlighted preview, install {bat}{5}
 - If {delta}{6} is available, `:GFilesWithDevicons?` will use it to
   format `git diff` output.
 - `Ag` requires {The Silver Searcher (ag)}{7}
 - `Rg` requires {ripgrep (rg)}{8}

                             {1} https://github.com/junegunn/fzf
                             {5} https://github.com/sharkdp/bat
                             {6} https://github.com/dandavison/delta
                             {7} https://github.com/ggreer/the_silver_searcher
                             {8} https://github.com/BurntSushi/ripgrep


COMMANDS                                              *fzf-devicon-vim-commands*
==============================================================================

    *:FilesWithDevicons* *:GitFilesWithDevicons* *:RgWithDevicons* *:RGWithDevicons*
        *:LocateWithDevicons* *:AgWithDevicons*

 -------------------------------+-----------------------------------------------------------------------
 Command                        | List                                                                  ~
 -------------------------------+-----------------------------------------------------------------------
  `:FilesWithDevicons [PATH]`     | Files (runs  `$FZF_DEFAULT_COMMAND`  if defined)
  `:GFilesWithDevicons [OPTS]`    | Git files ( `git ls-files` )
  `:GFilesWithDevicons?`          | Git files ( `git status` )
  `:AgWithDevicons [PATTERN]`     | {ag}{7} search result ( `ALT-A`  to select all,  `ALT-D`  to deselect all)
  `:RgWithDevicons [PATTERN]`     | {rg}{8} search result ( `ALT-A`  to select all,  `ALT-D`  to deselect all)
  `:RGWithDevicons [PATTERN]`     | {rg}{8} search result; relaunch ripgrep on every keystroke
  `:LocateWithDevicons PATTERN`   | `locate`  command output
 -------------------------------+-----------------------------------------------------------------------

                                                          *g:fzf_command_prefix*

 - All commands are piped to `devicon-lookup` which prefixes each line with a
   devicon
 - All commands support CTRL-T / CTRL-X / CTRL-V key bindings to open in a new
   tab, a new split, or in a new vertical split
 - Bang-versions of the commands (e.g. `AgWithDevicons!`) will open fzf in fullscreen
 - You can set `g:fzf_command_prefix` to give the same prefix to the commands
   - e.g. `let g:fzf_command_prefix = 'Fzf'` and you have `FzfFilesWithDevicons`, etc.

                             {7} https://github.com/ggreer/the_silver_searcher
                             {8} https://github.com/BurntSushi/ripgrep


CUSTOMIZATION                                    *fzf-devicon-vim-customization*
==============================================================================


< Global options >____________________________________________________________~
                                                *fzf-devicon-vim-global-options*

Every command in fzf.vim internally calls `fzf#wrap` function of the main
repository which supports a set of global option variables. So please read
through {README-VIM}{4} to learn more about them.

                 {4} https://github.com/junegunn/fzf/blob/master/README-VIM.md


Preview window~
                                                *fzf-devicon-vim-preview-window*

Some commands will show the preview window on the right. You can customize the
behavior with `g:fzf_preview_window`. Here are some examples:

                                                    *g:fzf_devicon_preview_bash*
>
    " This is the default option:
    "   - Preview window on the right with 50% width
    "   - CTRL-/ will toggle preview window.
    " - Note that this array is passed as arguments to fzf#vim#with_preview function.
    " - To learn more about preview window options, see `--preview-window` section of `man fzf`.
    let g:fzf_preview_window = ['right,50%', 'ctrl-/']

    " Preview window is hidden by default. You can toggle it with ctrl-/.
    " It will show on the right with 50% width, but if the width is smaller
    " than 70 columns, it will show above the candidate list
    let g:fzf_preview_window = ['hidden,right,50%,<70(up,40%)', 'ctrl-/']

    " Empty value to disable preview window altogether
    let g:fzf_preview_window = []

    " fzf.vim needs bash to display the preview window.
    " On Windows, fzf.vim will first see if bash is in $PATH, then if
    " Git bash (C:\Program Files\Git\bin\bash.exe) is available.
    " If you want it to use a different bash, set this variable.
    " let g:fzf_preview_bash = 'C:\Git\bin\bash.exe'
<


LICENSE                                                        *fzf-vim-license*
==============================================================================

MIT


==============================================================================
vim:tw=78:sw=2:ts=2:ft=help:norl:nowrap:
